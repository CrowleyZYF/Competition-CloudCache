
接口中使用token来隔离不同的缓存服务. token配置的接口如下:

1. /config/token/set: token, host, port

2. /config/token/remove: token

3. /config/token/list:
    返回的数据格式是:
        token1 127.0.0.1 6379
        token2 192.168.1.100 6380
        ...
    每行用空格隔开

整个协议层支持三种数据结构, 分别是string, hash.
其中基本元素只有string, 和hash内的元素也是string类型的.
然后键值即key一律都是string. 

约束: 
    下面的接口描述中, 所给的参数都不能为空, 加上[]的除外
    每个接口都有用户隔离的功能, 使用token参数进行区别, 就没有单独列出来了
    例如对于用户mingming来说, 其完整的调用应该是/set?key=hello&value=world&token=mingming
    每个接口都添加有过期值的支持, 参数名为expire, value值是秒数
    例如想要key在10秒后过期, 完整的调用应该是/set?key=hello&value=world&token=mingming&expire=10

关于标量string的接口:

    /set: key, value 
        存储字符串的值
        例如: /set?key=hello&value=world
    /get: key => value 
        返回字符串的值
        例如: /get?key=hello => world

关于hashtable的接口:
    
    /hash/setAll: key, value
        存储hashtable类型的值, 
        其中hashtable内部元素的值是由","和":"分割的字符串键值对序列,
        字符串值中的",:\"需要用"\"转义
        例如: /table/setAll?key=hello&value=k1:1,k2:2,k3:3
    /hash/getAll: key => value
        返回hashtable类型的值
        例如: /table/getAll?key=hello => k1:1,k2:2,k3:3
        
    /hash/set: key, index, value
        设置hashtable集合内指定索引键的值
        例如: /table/set?key=hello&index=k1&value=b
    /hash/get: key, index
        返回hashtable集合内指定索引建的值
        例如: /table/get?key=hello&index=k1
    /hash/remove:
        删除hashtable集合内指定索引建的键值对
        例如: /table/remove?key=hello&index=k1

    /hash/size: key => size
        返回hashtable的大小
        例如: /hash/size?key=hello => 3
